// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "url-shortener/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// DeleteShortUrl provides a mock function with given fields: ctx, shortURL
func (_m *Database) DeleteShortUrl(ctx context.Context, shortURL string) error {
	ret := _m.Called(ctx, shortURL)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByLongUrl provides a mock function with given fields: ctx, url
func (_m *Database) GetByLongUrl(ctx context.Context, url string) (*domain.URL, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GetByLongUrl")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.URL, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.URL); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountShortUrls provides a mock function with given fields: ctx
func (_m *Database) GetCountShortUrls(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCountShortUrls")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortUrl provides a mock function with given fields: ctx, url
func (_m *Database) GetShortUrl(ctx context.Context, url string) (*domain.URL, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GetShortUrl")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.URL, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.URL); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUrl provides a mock function with given fields: ctx, url
func (_m *Database) InsertUrl(ctx context.Context, url domain.URL) error {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for InsertUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.URL) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
