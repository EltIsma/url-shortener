// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "url-shortener/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// URLShortenerService is an autogenerated mock type for the URLShortenerService type
type URLShortenerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, url
func (_m *URLShortenerService) Create(ctx context.Context, url string) (*domain.URL, int, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.URL
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.URL, int, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.URL); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteShortUrl provides a mock function with given fields: ctx, shortUrl
func (_m *URLShortenerService) DeleteShortUrl(ctx context.Context, shortUrl string) error {
	ret := _m.Called(ctx, shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOriginalURL provides a mock function with given fields: ctx, shortUrl
func (_m *URLShortenerService) GetOriginalURL(ctx context.Context, shortUrl string) (string, error) {
	ret := _m.Called(ctx, shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewURLShortenerService creates a new instance of URLShortenerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLShortenerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLShortenerService {
	mock := &URLShortenerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
